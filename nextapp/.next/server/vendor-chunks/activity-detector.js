"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/activity-detector";
exports.ids = ["vendor-chunks/activity-detector"];
exports.modules = {

/***/ "(ssr)/./node_modules/activity-detector/dist/activity-detector.js":
/*!******************************************************************!*\
  !*** ./node_modules/activity-detector/dist/activity-detector.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nvar ACTIVE = \"active\";\nvar IDLE = \"idle\";\nvar DEFAULT_INITIAL_STATE = ACTIVE;\nvar DEFAULT_ACTIVITY_EVENTS = [\n    \"click\",\n    \"mousemove\",\n    \"keydown\",\n    \"DOMMouseScroll\",\n    \"mousewheel\",\n    \"mousedown\",\n    \"touchstart\",\n    \"touchmove\",\n    \"focus\"\n];\nvar DEFAULT_INACTIVITY_EVENTS = [\n    \"blur\",\n    \"visibilitychange\"\n];\nvar DEFAULT_IGNORED_EVENTS_WHEN_IDLE = [\n    \"mousemove\"\n];\nvar hidden = void 0, visibilityChangeEvent = void 0;\nif (typeof document.hidden !== \"undefined\") {\n    hidden = \"hidden\";\n    visibilityChangeEvent = \"visibilitychange\";\n} else {\n    var prefixes = [\n        \"webkit\",\n        \"moz\",\n        \"ms\"\n    ];\n    for(var i = 0; i < prefixes.length; i++){\n        var prefix = prefixes[i];\n        if (typeof document[prefix + \"Hidden\"] !== \"undefined\") {\n            hidden = prefix + \"Hidden\";\n            visibilityChangeEvent = prefix + \"visibilitychange\";\n            break;\n        }\n    }\n}\n/**\n * Creates an activity detector instance\n *\n * @param  {Object}   options\n * @param  {string[]} options.activityEvents        Events which force a transition to 'active'\n * @param  {string[]} options.inactivityEvents      Events which force a transition to 'idle'\n * @param  {string[]} options.ignoredEventsWhenIdle Events that are ignored in 'idle' state\n * @param  {number}   options.timeToIdle            Inactivity time in ms to transition to 'idle'\n * @param  {string}   options.initialState          One of 'active' or 'idle'\n * @param  {boolean}  options.autoInit\n * @return {Object}   activity detector instance\n */ var activityDetector = function activityDetector() {\n    var _listeners;\n    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {}, _ref$activityEvents = _ref.activityEvents, activityEvents = _ref$activityEvents === undefined ? DEFAULT_ACTIVITY_EVENTS : _ref$activityEvents, _ref$inactivityEvents = _ref.inactivityEvents, inactivityEvents = _ref$inactivityEvents === undefined ? DEFAULT_INACTIVITY_EVENTS : _ref$inactivityEvents, _ref$ignoredEventsWhe = _ref.ignoredEventsWhenIdle, ignoredEventsWhenIdle = _ref$ignoredEventsWhe === undefined ? DEFAULT_IGNORED_EVENTS_WHEN_IDLE : _ref$ignoredEventsWhe, _ref$timeToIdle = _ref.timeToIdle, timeToIdle = _ref$timeToIdle === undefined ? 30000 : _ref$timeToIdle, _ref$initialState = _ref.initialState, initialState = _ref$initialState === undefined ? DEFAULT_INITIAL_STATE : _ref$initialState, _ref$autoInit = _ref.autoInit, autoInit = _ref$autoInit === undefined ? true : _ref$autoInit;\n    var listeners = (_listeners = {}, _defineProperty(_listeners, ACTIVE, []), _defineProperty(_listeners, IDLE, []), _listeners);\n    var state = void 0;\n    var timer = void 0;\n    var setState = function setState(newState) {\n        clearTimeout(timer);\n        if (newState === ACTIVE) {\n            timer = setTimeout(function() {\n                return setState(IDLE);\n            }, timeToIdle);\n        }\n        if (state !== newState) {\n            state = newState;\n            listeners[state].forEach(function(l) {\n                return l();\n            });\n        }\n    };\n    var handleUserActivityEvent = function handleUserActivityEvent(event) {\n        if (state === ACTIVE || ignoredEventsWhenIdle.indexOf(event.type) < 0) {\n            setState(ACTIVE);\n        }\n    };\n    var handleUserInactivityEvent = function handleUserInactivityEvent() {\n        setState(IDLE);\n    };\n    var handleVisibilityChangeEvent = function handleVisibilityChangeEvent() {\n        setState(document[hidden] ? IDLE : ACTIVE);\n    };\n    /**\n     * Starts the activity detector with the given state.\n     * @param {string} firstState 'idle' or 'active'\n     */ var init = function init() {\n        var firstState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : DEFAULT_INITIAL_STATE;\n        setState(firstState === ACTIVE ? ACTIVE : IDLE);\n        activityEvents.forEach(function(eventName) {\n            return window.addEventListener(eventName, handleUserActivityEvent);\n        });\n        inactivityEvents.filter(function(eventName) {\n            return eventName !== \"visibilitychange\";\n        }).forEach(function(eventName) {\n            return window.addEventListener(eventName, handleUserInactivityEvent);\n        });\n        if (inactivityEvents.indexOf(\"visibilitychange\") >= 0 && visibilityChangeEvent) {\n            document.addEventListener(visibilityChangeEvent, handleVisibilityChangeEvent);\n        }\n    };\n    /**\n     * Register an event listener for the required event\n     * @param {string} eventName 'active' or 'idle'\n     * @param {Function} listener\n     */ var on = function on(eventName, listener) {\n        listeners[eventName].push(listener);\n        var off = function off() {\n            var index = listeners[eventName].indexOf(listener);\n            if (index >= 0) {\n                listeners[eventName].splice(index, 1);\n            }\n        };\n        return off;\n    };\n    /**\n     * Stops the activity detector and clean the listeners\n     */ var stop = function stop() {\n        listeners[ACTIVE] = [];\n        listeners[IDLE] = [];\n        clearTimeout(timer);\n        activityEvents.forEach(function(eventName) {\n            return window.removeEventListener(eventName, handleUserActivityEvent);\n        });\n        inactivityEvents.forEach(function(eventName) {\n            return window.removeEventListener(eventName, handleUserInactivityEvent);\n        });\n        if (visibilityChangeEvent) {\n            document.removeEventListener(visibilityChangeEvent, handleVisibilityChangeEvent);\n        }\n    };\n    if (autoInit) {\n        init(initialState);\n    }\n    return {\n        on: on,\n        stop: stop,\n        init: init\n    };\n};\nexports[\"default\"] = activityDetector;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYWN0aXZpdHktZGV0ZWN0b3IvZGlzdC9hY3Rpdml0eS1kZXRlY3Rvci5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBQSw4Q0FBNkM7SUFDekNHLE9BQU87QUFDWCxDQUFDLEVBQUM7QUFFRixTQUFTQyxnQkFBZ0JDLEdBQUcsRUFBRUMsR0FBRyxFQUFFSCxLQUFLO0lBQUksSUFBSUcsT0FBT0QsS0FBSztRQUFFTCxPQUFPQyxjQUFjLENBQUNJLEtBQUtDLEtBQUs7WUFBRUgsT0FBT0E7WUFBT0ksWUFBWTtZQUFNQyxjQUFjO1lBQU1DLFVBQVU7UUFBSztJQUFJLE9BQU87UUFBRUosR0FBRyxDQUFDQyxJQUFJLEdBQUdIO0lBQU87SUFBRSxPQUFPRTtBQUFLO0FBRWhOLElBQUlLLFNBQVM7QUFDYixJQUFJQyxPQUFPO0FBRVgsSUFBSUMsd0JBQXdCRjtBQUU1QixJQUFJRywwQkFBMEI7SUFBQztJQUFTO0lBQWE7SUFBVztJQUFrQjtJQUFjO0lBQWE7SUFBYztJQUFhO0NBQVE7QUFFaEosSUFBSUMsNEJBQTRCO0lBQUM7SUFBUTtDQUFtQjtBQUU1RCxJQUFJQyxtQ0FBbUM7SUFBQztDQUFZO0FBRXBELElBQUlDLFNBQVMsS0FBSyxHQUNkQyx3QkFBd0IsS0FBSztBQUNqQyxJQUFJLE9BQU9DLFNBQVNGLE1BQU0sS0FBSyxhQUFhO0lBQ3hDQSxTQUFTO0lBQ1RDLHdCQUF3QjtBQUM1QixPQUFPO0lBQ0gsSUFBSUUsV0FBVztRQUFDO1FBQVU7UUFBTztLQUFLO0lBQ3RDLElBQUssSUFBSUMsSUFBSSxHQUFHQSxJQUFJRCxTQUFTRSxNQUFNLEVBQUVELElBQUs7UUFDdEMsSUFBSUUsU0FBU0gsUUFBUSxDQUFDQyxFQUFFO1FBQ3hCLElBQUksT0FBT0YsUUFBUSxDQUFDSSxTQUFTLFNBQVMsS0FBSyxhQUFhO1lBQ3BETixTQUFTTSxTQUFTO1lBQ2xCTCx3QkFBd0JLLFNBQVM7WUFDakM7UUFDSjtJQUNKO0FBQ0o7QUFFQTs7Ozs7Ozs7Ozs7Q0FXQyxHQUNELElBQUlDLG1CQUFtQixTQUFTQTtJQUM1QixJQUFJQztJQUVKLElBQUlDLE9BQU9DLFVBQVVMLE1BQU0sR0FBRyxLQUFLSyxTQUFTLENBQUMsRUFBRSxLQUFLQyxZQUFZRCxTQUFTLENBQUMsRUFBRSxHQUFHLENBQUMsR0FDNUVFLHNCQUFzQkgsS0FBS0ksY0FBYyxFQUN6Q0EsaUJBQWlCRCx3QkFBd0JELFlBQVlkLDBCQUEwQmUscUJBQy9FRSx3QkFBd0JMLEtBQUtNLGdCQUFnQixFQUM3Q0EsbUJBQW1CRCwwQkFBMEJILFlBQVliLDRCQUE0QmdCLHVCQUNyRkUsd0JBQXdCUCxLQUFLUSxxQkFBcUIsRUFDbERBLHdCQUF3QkQsMEJBQTBCTCxZQUFZWixtQ0FBbUNpQix1QkFDakdFLGtCQUFrQlQsS0FBS1UsVUFBVSxFQUNqQ0EsYUFBYUQsb0JBQW9CUCxZQUFZLFFBQVFPLGlCQUNyREUsb0JBQW9CWCxLQUFLWSxZQUFZLEVBQ3JDQSxlQUFlRCxzQkFBc0JULFlBQVlmLHdCQUF3QndCLG1CQUN6RUUsZ0JBQWdCYixLQUFLYyxRQUFRLEVBQzdCQSxXQUFXRCxrQkFBa0JYLFlBQVksT0FBT1c7SUFFcEQsSUFBSUUsWUFBYWhCLENBQUFBLGFBQWEsQ0FBQyxHQUFHcEIsZ0JBQWdCb0IsWUFBWWQsUUFBUSxFQUFFLEdBQUdOLGdCQUFnQm9CLFlBQVliLE1BQU0sRUFBRSxHQUFHYSxVQUFTO0lBQzNILElBQUlpQixRQUFRLEtBQUs7SUFDakIsSUFBSUMsUUFBUSxLQUFLO0lBRWpCLElBQUlDLFdBQVcsU0FBU0EsU0FBU0MsUUFBUTtRQUNyQ0MsYUFBYUg7UUFDYixJQUFJRSxhQUFhbEMsUUFBUTtZQUNyQmdDLFFBQVFJLFdBQVc7Z0JBQ2YsT0FBT0gsU0FBU2hDO1lBQ3BCLEdBQUd3QjtRQUNQO1FBQ0EsSUFBSU0sVUFBVUcsVUFBVTtZQUNwQkgsUUFBUUc7WUFDUkosU0FBUyxDQUFDQyxNQUFNLENBQUNNLE9BQU8sQ0FBQyxTQUFVQyxDQUFDO2dCQUNoQyxPQUFPQTtZQUNYO1FBQ0o7SUFDSjtJQUVBLElBQUlDLDBCQUEwQixTQUFTQSx3QkFBd0JDLEtBQUs7UUFDaEUsSUFBSVQsVUFBVS9CLFVBQVV1QixzQkFBc0JrQixPQUFPLENBQUNELE1BQU1FLElBQUksSUFBSSxHQUFHO1lBQ25FVCxTQUFTakM7UUFDYjtJQUNKO0lBRUEsSUFBSTJDLDRCQUE0QixTQUFTQTtRQUNyQ1YsU0FBU2hDO0lBQ2I7SUFFQSxJQUFJMkMsOEJBQThCLFNBQVNBO1FBQ3ZDWCxTQUFTekIsUUFBUSxDQUFDRixPQUFPLEdBQUdMLE9BQU9EO0lBQ3ZDO0lBRUE7OztLQUdDLEdBQ0QsSUFBSTZDLE9BQU8sU0FBU0E7UUFDaEIsSUFBSUMsYUFBYTlCLFVBQVVMLE1BQU0sR0FBRyxLQUFLSyxTQUFTLENBQUMsRUFBRSxLQUFLQyxZQUFZRCxTQUFTLENBQUMsRUFBRSxHQUFHZDtRQUVyRitCLFNBQVNhLGVBQWU5QyxTQUFTQSxTQUFTQztRQUMxQ2tCLGVBQWVrQixPQUFPLENBQUMsU0FBVVUsU0FBUztZQUN0QyxPQUFPQyxPQUFPQyxnQkFBZ0IsQ0FBQ0YsV0FBV1I7UUFDOUM7UUFFQWxCLGlCQUFpQjZCLE1BQU0sQ0FBQyxTQUFVSCxTQUFTO1lBQ3ZDLE9BQU9BLGNBQWM7UUFDekIsR0FBR1YsT0FBTyxDQUFDLFNBQVVVLFNBQVM7WUFDMUIsT0FBT0MsT0FBT0MsZ0JBQWdCLENBQUNGLFdBQVdKO1FBQzlDO1FBRUEsSUFBSXRCLGlCQUFpQm9CLE9BQU8sQ0FBQyx1QkFBdUIsS0FBS2xDLHVCQUF1QjtZQUM1RUMsU0FBU3lDLGdCQUFnQixDQUFDMUMsdUJBQXVCcUM7UUFDckQ7SUFDSjtJQUVBOzs7O0tBSUMsR0FDRCxJQUFJTyxLQUFLLFNBQVNBLEdBQUdKLFNBQVMsRUFBRUssUUFBUTtRQUNwQ3RCLFNBQVMsQ0FBQ2lCLFVBQVUsQ0FBQ00sSUFBSSxDQUFDRDtRQUMxQixJQUFJRSxNQUFNLFNBQVNBO1lBQ2YsSUFBSUMsUUFBUXpCLFNBQVMsQ0FBQ2lCLFVBQVUsQ0FBQ04sT0FBTyxDQUFDVztZQUN6QyxJQUFJRyxTQUFTLEdBQUc7Z0JBQ1p6QixTQUFTLENBQUNpQixVQUFVLENBQUNTLE1BQU0sQ0FBQ0QsT0FBTztZQUN2QztRQUNKO1FBQ0EsT0FBT0Q7SUFDWDtJQUVBOztLQUVDLEdBQ0QsSUFBSUcsT0FBTyxTQUFTQTtRQUNoQjNCLFNBQVMsQ0FBQzlCLE9BQU8sR0FBRyxFQUFFO1FBQ3RCOEIsU0FBUyxDQUFDN0IsS0FBSyxHQUFHLEVBQUU7UUFFcEJrQyxhQUFhSDtRQUViYixlQUFla0IsT0FBTyxDQUFDLFNBQVVVLFNBQVM7WUFDdEMsT0FBT0MsT0FBT1UsbUJBQW1CLENBQUNYLFdBQVdSO1FBQ2pEO1FBRUFsQixpQkFBaUJnQixPQUFPLENBQUMsU0FBVVUsU0FBUztZQUN4QyxPQUFPQyxPQUFPVSxtQkFBbUIsQ0FBQ1gsV0FBV0o7UUFDakQ7UUFFQSxJQUFJcEMsdUJBQXVCO1lBQ3ZCQyxTQUFTa0QsbUJBQW1CLENBQUNuRCx1QkFBdUJxQztRQUN4RDtJQUNKO0lBRUEsSUFBSWYsVUFBVTtRQUNWZ0IsS0FBS2xCO0lBQ1Q7SUFFQSxPQUFPO1FBQUV3QixJQUFJQTtRQUFJTSxNQUFNQTtRQUFNWixNQUFNQTtJQUFLO0FBQzVDO0FBRUFyRCxrQkFBZSxHQUFHcUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mb29kaWVzLy4vbm9kZV9tb2R1bGVzL2FjdGl2aXR5LWRldGVjdG9yL2Rpc3QvYWN0aXZpdHktZGV0ZWN0b3IuanM/ODU4NiJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgeyBpZiAoa2V5IGluIG9iaikgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsgdmFsdWU6IHZhbHVlLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0pOyB9IGVsc2UgeyBvYmpba2V5XSA9IHZhbHVlOyB9IHJldHVybiBvYmo7IH1cblxudmFyIEFDVElWRSA9ICdhY3RpdmUnO1xudmFyIElETEUgPSAnaWRsZSc7XG5cbnZhciBERUZBVUxUX0lOSVRJQUxfU1RBVEUgPSBBQ1RJVkU7XG5cbnZhciBERUZBVUxUX0FDVElWSVRZX0VWRU5UUyA9IFsnY2xpY2snLCAnbW91c2Vtb3ZlJywgJ2tleWRvd24nLCAnRE9NTW91c2VTY3JvbGwnLCAnbW91c2V3aGVlbCcsICdtb3VzZWRvd24nLCAndG91Y2hzdGFydCcsICd0b3VjaG1vdmUnLCAnZm9jdXMnXTtcblxudmFyIERFRkFVTFRfSU5BQ1RJVklUWV9FVkVOVFMgPSBbJ2JsdXInLCAndmlzaWJpbGl0eWNoYW5nZSddO1xuXG52YXIgREVGQVVMVF9JR05PUkVEX0VWRU5UU19XSEVOX0lETEUgPSBbJ21vdXNlbW92ZSddO1xuXG52YXIgaGlkZGVuID0gdm9pZCAwLFxuICAgIHZpc2liaWxpdHlDaGFuZ2VFdmVudCA9IHZvaWQgMDtcbmlmICh0eXBlb2YgZG9jdW1lbnQuaGlkZGVuICE9PSAndW5kZWZpbmVkJykge1xuICAgIGhpZGRlbiA9ICdoaWRkZW4nO1xuICAgIHZpc2liaWxpdHlDaGFuZ2VFdmVudCA9ICd2aXNpYmlsaXR5Y2hhbmdlJztcbn0gZWxzZSB7XG4gICAgdmFyIHByZWZpeGVzID0gWyd3ZWJraXQnLCAnbW96JywgJ21zJ107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcmVmaXhlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgcHJlZml4ID0gcHJlZml4ZXNbaV07XG4gICAgICAgIGlmICh0eXBlb2YgZG9jdW1lbnRbcHJlZml4ICsgJ0hpZGRlbiddICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgaGlkZGVuID0gcHJlZml4ICsgJ0hpZGRlbic7XG4gICAgICAgICAgICB2aXNpYmlsaXR5Q2hhbmdlRXZlbnQgPSBwcmVmaXggKyAndmlzaWJpbGl0eWNoYW5nZSc7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cbn1cblxuLyoqXG4gKiBDcmVhdGVzIGFuIGFjdGl2aXR5IGRldGVjdG9yIGluc3RhbmNlXG4gKlxuICogQHBhcmFtICB7T2JqZWN0fSAgIG9wdGlvbnNcbiAqIEBwYXJhbSAge3N0cmluZ1tdfSBvcHRpb25zLmFjdGl2aXR5RXZlbnRzICAgICAgICBFdmVudHMgd2hpY2ggZm9yY2UgYSB0cmFuc2l0aW9uIHRvICdhY3RpdmUnXG4gKiBAcGFyYW0gIHtzdHJpbmdbXX0gb3B0aW9ucy5pbmFjdGl2aXR5RXZlbnRzICAgICAgRXZlbnRzIHdoaWNoIGZvcmNlIGEgdHJhbnNpdGlvbiB0byAnaWRsZSdcbiAqIEBwYXJhbSAge3N0cmluZ1tdfSBvcHRpb25zLmlnbm9yZWRFdmVudHNXaGVuSWRsZSBFdmVudHMgdGhhdCBhcmUgaWdub3JlZCBpbiAnaWRsZScgc3RhdGVcbiAqIEBwYXJhbSAge251bWJlcn0gICBvcHRpb25zLnRpbWVUb0lkbGUgICAgICAgICAgICBJbmFjdGl2aXR5IHRpbWUgaW4gbXMgdG8gdHJhbnNpdGlvbiB0byAnaWRsZSdcbiAqIEBwYXJhbSAge3N0cmluZ30gICBvcHRpb25zLmluaXRpYWxTdGF0ZSAgICAgICAgICBPbmUgb2YgJ2FjdGl2ZScgb3IgJ2lkbGUnXG4gKiBAcGFyYW0gIHtib29sZWFufSAgb3B0aW9ucy5hdXRvSW5pdFxuICogQHJldHVybiB7T2JqZWN0fSAgIGFjdGl2aXR5IGRldGVjdG9yIGluc3RhbmNlXG4gKi9cbnZhciBhY3Rpdml0eURldGVjdG9yID0gZnVuY3Rpb24gYWN0aXZpdHlEZXRlY3RvcigpIHtcbiAgICB2YXIgX2xpc3RlbmVycztcblxuICAgIHZhciBfcmVmID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fSxcbiAgICAgICAgX3JlZiRhY3Rpdml0eUV2ZW50cyA9IF9yZWYuYWN0aXZpdHlFdmVudHMsXG4gICAgICAgIGFjdGl2aXR5RXZlbnRzID0gX3JlZiRhY3Rpdml0eUV2ZW50cyA9PT0gdW5kZWZpbmVkID8gREVGQVVMVF9BQ1RJVklUWV9FVkVOVFMgOiBfcmVmJGFjdGl2aXR5RXZlbnRzLFxuICAgICAgICBfcmVmJGluYWN0aXZpdHlFdmVudHMgPSBfcmVmLmluYWN0aXZpdHlFdmVudHMsXG4gICAgICAgIGluYWN0aXZpdHlFdmVudHMgPSBfcmVmJGluYWN0aXZpdHlFdmVudHMgPT09IHVuZGVmaW5lZCA/IERFRkFVTFRfSU5BQ1RJVklUWV9FVkVOVFMgOiBfcmVmJGluYWN0aXZpdHlFdmVudHMsXG4gICAgICAgIF9yZWYkaWdub3JlZEV2ZW50c1doZSA9IF9yZWYuaWdub3JlZEV2ZW50c1doZW5JZGxlLFxuICAgICAgICBpZ25vcmVkRXZlbnRzV2hlbklkbGUgPSBfcmVmJGlnbm9yZWRFdmVudHNXaGUgPT09IHVuZGVmaW5lZCA/IERFRkFVTFRfSUdOT1JFRF9FVkVOVFNfV0hFTl9JRExFIDogX3JlZiRpZ25vcmVkRXZlbnRzV2hlLFxuICAgICAgICBfcmVmJHRpbWVUb0lkbGUgPSBfcmVmLnRpbWVUb0lkbGUsXG4gICAgICAgIHRpbWVUb0lkbGUgPSBfcmVmJHRpbWVUb0lkbGUgPT09IHVuZGVmaW5lZCA/IDMwMDAwIDogX3JlZiR0aW1lVG9JZGxlLFxuICAgICAgICBfcmVmJGluaXRpYWxTdGF0ZSA9IF9yZWYuaW5pdGlhbFN0YXRlLFxuICAgICAgICBpbml0aWFsU3RhdGUgPSBfcmVmJGluaXRpYWxTdGF0ZSA9PT0gdW5kZWZpbmVkID8gREVGQVVMVF9JTklUSUFMX1NUQVRFIDogX3JlZiRpbml0aWFsU3RhdGUsXG4gICAgICAgIF9yZWYkYXV0b0luaXQgPSBfcmVmLmF1dG9Jbml0LFxuICAgICAgICBhdXRvSW5pdCA9IF9yZWYkYXV0b0luaXQgPT09IHVuZGVmaW5lZCA/IHRydWUgOiBfcmVmJGF1dG9Jbml0O1xuXG4gICAgdmFyIGxpc3RlbmVycyA9IChfbGlzdGVuZXJzID0ge30sIF9kZWZpbmVQcm9wZXJ0eShfbGlzdGVuZXJzLCBBQ1RJVkUsIFtdKSwgX2RlZmluZVByb3BlcnR5KF9saXN0ZW5lcnMsIElETEUsIFtdKSwgX2xpc3RlbmVycyk7XG4gICAgdmFyIHN0YXRlID0gdm9pZCAwO1xuICAgIHZhciB0aW1lciA9IHZvaWQgMDtcblxuICAgIHZhciBzZXRTdGF0ZSA9IGZ1bmN0aW9uIHNldFN0YXRlKG5ld1N0YXRlKSB7XG4gICAgICAgIGNsZWFyVGltZW91dCh0aW1lcik7XG4gICAgICAgIGlmIChuZXdTdGF0ZSA9PT0gQUNUSVZFKSB7XG4gICAgICAgICAgICB0aW1lciA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBzZXRTdGF0ZShJRExFKTtcbiAgICAgICAgICAgIH0sIHRpbWVUb0lkbGUpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzdGF0ZSAhPT0gbmV3U3RhdGUpIHtcbiAgICAgICAgICAgIHN0YXRlID0gbmV3U3RhdGU7XG4gICAgICAgICAgICBsaXN0ZW5lcnNbc3RhdGVdLmZvckVhY2goZnVuY3Rpb24gKGwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbCgpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgdmFyIGhhbmRsZVVzZXJBY3Rpdml0eUV2ZW50ID0gZnVuY3Rpb24gaGFuZGxlVXNlckFjdGl2aXR5RXZlbnQoZXZlbnQpIHtcbiAgICAgICAgaWYgKHN0YXRlID09PSBBQ1RJVkUgfHwgaWdub3JlZEV2ZW50c1doZW5JZGxlLmluZGV4T2YoZXZlbnQudHlwZSkgPCAwKSB7XG4gICAgICAgICAgICBzZXRTdGF0ZShBQ1RJVkUpO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIHZhciBoYW5kbGVVc2VySW5hY3Rpdml0eUV2ZW50ID0gZnVuY3Rpb24gaGFuZGxlVXNlckluYWN0aXZpdHlFdmVudCgpIHtcbiAgICAgICAgc2V0U3RhdGUoSURMRSk7XG4gICAgfTtcblxuICAgIHZhciBoYW5kbGVWaXNpYmlsaXR5Q2hhbmdlRXZlbnQgPSBmdW5jdGlvbiBoYW5kbGVWaXNpYmlsaXR5Q2hhbmdlRXZlbnQoKSB7XG4gICAgICAgIHNldFN0YXRlKGRvY3VtZW50W2hpZGRlbl0gPyBJRExFIDogQUNUSVZFKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogU3RhcnRzIHRoZSBhY3Rpdml0eSBkZXRlY3RvciB3aXRoIHRoZSBnaXZlbiBzdGF0ZS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gZmlyc3RTdGF0ZSAnaWRsZScgb3IgJ2FjdGl2ZSdcbiAgICAgKi9cbiAgICB2YXIgaW5pdCA9IGZ1bmN0aW9uIGluaXQoKSB7XG4gICAgICAgIHZhciBmaXJzdFN0YXRlID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiBERUZBVUxUX0lOSVRJQUxfU1RBVEU7XG5cbiAgICAgICAgc2V0U3RhdGUoZmlyc3RTdGF0ZSA9PT0gQUNUSVZFID8gQUNUSVZFIDogSURMRSk7XG4gICAgICAgIGFjdGl2aXR5RXZlbnRzLmZvckVhY2goZnVuY3Rpb24gKGV2ZW50TmFtZSkge1xuICAgICAgICAgICAgcmV0dXJuIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKGV2ZW50TmFtZSwgaGFuZGxlVXNlckFjdGl2aXR5RXZlbnQpO1xuICAgICAgICB9KTtcblxuICAgICAgICBpbmFjdGl2aXR5RXZlbnRzLmZpbHRlcihmdW5jdGlvbiAoZXZlbnROYW1lKSB7XG4gICAgICAgICAgICByZXR1cm4gZXZlbnROYW1lICE9PSAndmlzaWJpbGl0eWNoYW5nZSc7XG4gICAgICAgIH0pLmZvckVhY2goZnVuY3Rpb24gKGV2ZW50TmFtZSkge1xuICAgICAgICAgICAgcmV0dXJuIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKGV2ZW50TmFtZSwgaGFuZGxlVXNlckluYWN0aXZpdHlFdmVudCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmIChpbmFjdGl2aXR5RXZlbnRzLmluZGV4T2YoJ3Zpc2liaWxpdHljaGFuZ2UnKSA+PSAwICYmIHZpc2liaWxpdHlDaGFuZ2VFdmVudCkge1xuICAgICAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcih2aXNpYmlsaXR5Q2hhbmdlRXZlbnQsIGhhbmRsZVZpc2liaWxpdHlDaGFuZ2VFdmVudCk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUmVnaXN0ZXIgYW4gZXZlbnQgbGlzdGVuZXIgZm9yIHRoZSByZXF1aXJlZCBldmVudFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBldmVudE5hbWUgJ2FjdGl2ZScgb3IgJ2lkbGUnXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gbGlzdGVuZXJcbiAgICAgKi9cbiAgICB2YXIgb24gPSBmdW5jdGlvbiBvbihldmVudE5hbWUsIGxpc3RlbmVyKSB7XG4gICAgICAgIGxpc3RlbmVyc1tldmVudE5hbWVdLnB1c2gobGlzdGVuZXIpO1xuICAgICAgICB2YXIgb2ZmID0gZnVuY3Rpb24gb2ZmKCkge1xuICAgICAgICAgICAgdmFyIGluZGV4ID0gbGlzdGVuZXJzW2V2ZW50TmFtZV0uaW5kZXhPZihsaXN0ZW5lcik7XG4gICAgICAgICAgICBpZiAoaW5kZXggPj0gMCkge1xuICAgICAgICAgICAgICAgIGxpc3RlbmVyc1tldmVudE5hbWVdLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBvZmY7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFN0b3BzIHRoZSBhY3Rpdml0eSBkZXRlY3RvciBhbmQgY2xlYW4gdGhlIGxpc3RlbmVyc1xuICAgICAqL1xuICAgIHZhciBzdG9wID0gZnVuY3Rpb24gc3RvcCgpIHtcbiAgICAgICAgbGlzdGVuZXJzW0FDVElWRV0gPSBbXTtcbiAgICAgICAgbGlzdGVuZXJzW0lETEVdID0gW107XG5cbiAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVyKTtcblxuICAgICAgICBhY3Rpdml0eUV2ZW50cy5mb3JFYWNoKGZ1bmN0aW9uIChldmVudE5hbWUpIHtcbiAgICAgICAgICAgIHJldHVybiB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudE5hbWUsIGhhbmRsZVVzZXJBY3Rpdml0eUV2ZW50KTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaW5hY3Rpdml0eUV2ZW50cy5mb3JFYWNoKGZ1bmN0aW9uIChldmVudE5hbWUpIHtcbiAgICAgICAgICAgIHJldHVybiB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudE5hbWUsIGhhbmRsZVVzZXJJbmFjdGl2aXR5RXZlbnQpO1xuICAgICAgICB9KTtcblxuICAgICAgICBpZiAodmlzaWJpbGl0eUNoYW5nZUV2ZW50KSB7XG4gICAgICAgICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKHZpc2liaWxpdHlDaGFuZ2VFdmVudCwgaGFuZGxlVmlzaWJpbGl0eUNoYW5nZUV2ZW50KTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBpZiAoYXV0b0luaXQpIHtcbiAgICAgICAgaW5pdChpbml0aWFsU3RhdGUpO1xuICAgIH1cblxuICAgIHJldHVybiB7IG9uOiBvbiwgc3RvcDogc3RvcCwgaW5pdDogaW5pdCB9O1xufTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gYWN0aXZpdHlEZXRlY3RvcjsiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJfZGVmaW5lUHJvcGVydHkiLCJvYmoiLCJrZXkiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJBQ1RJVkUiLCJJRExFIiwiREVGQVVMVF9JTklUSUFMX1NUQVRFIiwiREVGQVVMVF9BQ1RJVklUWV9FVkVOVFMiLCJERUZBVUxUX0lOQUNUSVZJVFlfRVZFTlRTIiwiREVGQVVMVF9JR05PUkVEX0VWRU5UU19XSEVOX0lETEUiLCJoaWRkZW4iLCJ2aXNpYmlsaXR5Q2hhbmdlRXZlbnQiLCJkb2N1bWVudCIsInByZWZpeGVzIiwiaSIsImxlbmd0aCIsInByZWZpeCIsImFjdGl2aXR5RGV0ZWN0b3IiLCJfbGlzdGVuZXJzIiwiX3JlZiIsImFyZ3VtZW50cyIsInVuZGVmaW5lZCIsIl9yZWYkYWN0aXZpdHlFdmVudHMiLCJhY3Rpdml0eUV2ZW50cyIsIl9yZWYkaW5hY3Rpdml0eUV2ZW50cyIsImluYWN0aXZpdHlFdmVudHMiLCJfcmVmJGlnbm9yZWRFdmVudHNXaGUiLCJpZ25vcmVkRXZlbnRzV2hlbklkbGUiLCJfcmVmJHRpbWVUb0lkbGUiLCJ0aW1lVG9JZGxlIiwiX3JlZiRpbml0aWFsU3RhdGUiLCJpbml0aWFsU3RhdGUiLCJfcmVmJGF1dG9Jbml0IiwiYXV0b0luaXQiLCJsaXN0ZW5lcnMiLCJzdGF0ZSIsInRpbWVyIiwic2V0U3RhdGUiLCJuZXdTdGF0ZSIsImNsZWFyVGltZW91dCIsInNldFRpbWVvdXQiLCJmb3JFYWNoIiwibCIsImhhbmRsZVVzZXJBY3Rpdml0eUV2ZW50IiwiZXZlbnQiLCJpbmRleE9mIiwidHlwZSIsImhhbmRsZVVzZXJJbmFjdGl2aXR5RXZlbnQiLCJoYW5kbGVWaXNpYmlsaXR5Q2hhbmdlRXZlbnQiLCJpbml0IiwiZmlyc3RTdGF0ZSIsImV2ZW50TmFtZSIsIndpbmRvdyIsImFkZEV2ZW50TGlzdGVuZXIiLCJmaWx0ZXIiLCJvbiIsImxpc3RlbmVyIiwicHVzaCIsIm9mZiIsImluZGV4Iiwic3BsaWNlIiwic3RvcCIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJkZWZhdWx0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/activity-detector/dist/activity-detector.js\n");

/***/ })

};
;